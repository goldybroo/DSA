void path(vector<vector<int>>maze,int row,int col,int n,vector<vector<int>>&v,string s ,vector<string>&ans)
{
    if(maze[row][col]==0)
    {
        return;
    }
	if ((row == n - 1) && (col == n - 1))
	{
		ans.push_back(s);
		return;
	}

	if (((row+1)<n)&&(maze[row + 1][col] != 0) && (v[row + 1][col] != 1))
	{
		v[row ][col] = 1;
		path(maze, row + 1, col, n, v, s + 'D', ans);
		v[row ][col] = 0;
	}
	if (((col - 1) >= 0) && (maze[row][col - 1] != 0) && (v[row][col - 1] != 1))
	{
		v[row][col] = 1;
		path(maze, row, col - 1, n, v, s + 'L', ans);
		v[row][col] = 0;
	}
	if (((col + 1) < n) && (maze[row][col + 1] != 0) && (v[row][col + 1] != 1))
	{
		v[row] [col] = 1;
		path(maze, row, col + 1, n, v, s + 'R', ans);
		v[row][col ] = 0;
	}
	if (((row - 1) >= 0) && (maze[row - 1][col] != 0) && (v[row - 1][col] != 1))
	{
		v[row ][col] = 1;
		path(maze, row - 1, col, n, v, s + 'U', ans);
		v[row ][col] = 0;
	}
	
}
    vector<string> findPath(vector<vector<int>> &maze, int n)
    {
        vector<vector<int>> v(n, vector<int>(n, 0));
	    string s;
	    vector<string>ans;
	    path(maze, 0,0,n,v, s, ans);
	    return ans;
    }
